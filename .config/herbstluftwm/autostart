#!/usr/bin/env bash

hc() {
    herbstclient "$@"
}

hc lock

hc emit_hook reload

focus_empty() {
    hc layout | grep max.*[FOCUS] && return

    tag=$(hc list_monitors | grep '\[FOCUS\]' | cut -d'"' -f2)
    for i in $(seq 1 $(hc attr tags.by-name.$tag.frame_count)); do
        (( $(hc attr tags.by-name.$tag.curframe_wcount) )) || break
        hc cycle_frame 1
    done
}

focus_nonempty() {
    tag=$(hc list_monitors | grep '\[FOCUS\]' | cut -d'"' -f2)
    frames=$(hc attr tags.by-name.$tag.frame_count)
    for i in $(seq 1 $frames); do
        hc cycle_frame 1
        (( $(hc attr tags.by-name.$tag.curframe_wcount) )) && break
        [[ $i -eq $frames ]] && hc cycle_frame 1
    done
}

# remove all existing keybindings
hc keyunbind --all

# keybindings
# if you have a super key you will be much happier with Mod set to Mod4
Mod=Mod1    # Use alt as the main modifier
# Mod=Mod4  # Use the super key as the main modifier

hc keybind $Mod-Shift-q quit
hc keybind $Mod-Shift-r reload
hc keybind $Mod-Shift-m detect_monitors

hc keybind $Mod-Return  chain . emit_hook focus_empty . spawn urxvt
hc keybind $Mod-grave   chain . emit_hook focus_empty . spawn rofi  \
    -lines 9 -location 3 -xoffset -16 -yoffset 32 -width 960    \
    -modi "run,ssh" -show run

hc keybind $Mod-w       chain . close . emit_hook focus_nonempty

# basic movement
# focusing clients
hc keybind $Mod-Left    focus left
hc keybind $Mod-Down    focus down
hc keybind $Mod-Up      focus up
hc keybind $Mod-Right   focus right

# moving clients
hc keybind $Mod-Control-Left    shift left
hc keybind $Mod-Control-Down    shift down
hc keybind $Mod-Control-Up      shift up
hc keybind $Mod-Control-Right   shift right

# splitting frames
# create an empty frame at the specified direction
hc keybind $Mod-u   split bottom 0.5
hc keybind $Mod-o   split right 0.5

# let the current frame explode into subframes
hc keybind $Mod-e   split explode

# layouting
hc keybind $Mod-r   remove

hc keybind $Mod-f   floating toggle
hc keybind $Mod-z   fullscreen toggle
hc keybind $Mod-p   pseudotile toggle

hc keybind $Mod-m   set_layout max

# The following cycles through the available layouts within a frame, but skips
# layouts, if the layout change wouldn't affect the actual window positions.
# I.e. if there are two windows within a frame, the grid layout is skipped.
hc keybind $Mod-c                                                       \
    or , and . compare tags.focus.curframe_wcount = 2                   \
             . cycle_layout +1 vertical horizontal max vertical grid    \
       , cycle_layout +1

# focus
hc keybind $Mod-space   cycle_monitor

hc keybind $Mod-slash   cycle_all --skip-invisible
hc keybind $Mod-period  cycle +1
hc keybind $Mod-comma   cycle -1
hc keybind $Mod-Tab     jumpto urgent

# tags
tag_names=( {1..9} )
tag_keys=( {1..9} )

hc rename default "${tag_names[0]}" || true
for i in ${!tag_names[@]} ; do
    hc add "${tag_names[$i]}"
    key="${tag_keys[$i]}"
    if ! [ -z "$key" ] ; then
        hc keybind "$Mod-$key" use_index "$i"
        hc keybind "$Mod-Control-$key" move_index "$i"
    fi
done

# cycle through tags
hc keybind $Mod-bracketright    use_index +1 --skip-visible
hc keybind $Mod-bracketleft     use_index -1 --skip-visible

# resizing frames
resizestep=0.04
hc keybind $Mod-h   resize left +$resizestep
hc keybind $Mod-j   resize down +$resizestep
hc keybind $Mod-k   resize up +$resizestep
hc keybind $Mod-l   resize right +$resizestep

# volume
hc keybind XF86AudioMute        chain . spawn amixer set Master toggle \
    . emit_hook volume
hc keybind XF86AudioRaiseVolume chain . spawn amixer set Master 2+ unmute \
    . emit_hook volume
hc keybind XF86AudioLowerVolume chain . spawn amixer set Master 2- unmute \
    . emit_hook volume

# mouse
hc mouseunbind --all
# hc mousebind $Mod-Button1   move
# hc mousebind $Mod-Button2   zoom
# hc mousebind $Mod-Button3   resize

# rules
hc unrule -F
hc rule focus=on # normally focus new clients
hc rule windowtype='_NET_WM_WINDOW_TYPE_DIALOG' focus=on
hc rule windowtype~'_NET_WM_WINDOW_TYPE_(DIALOG|UTILITY|SPLASH)' pseudotile=on
hc rule windowtype~'_NET_WM_WINDOW_TYPE_(NOTIFICATION|DOCK|DESKTOP)' manage=off

# settings
hc set frame_gap 12
hc set frame_padding 0
hc set window_gap 4
hc set mouse_recenter_gap 1
hc set frame_bg_transparent 1
hc set frame_transparent_width 0
hc set frame_border_width 0
hc set focus_crosses_monitor_boundaries 1
hc set raise_on_focus 1

# theme
hc attr theme.tiling.reset 1
hc attr theme.floating.reset 1

hc attr theme.color '#515151'
hc attr theme.border_width 3
hc attr theme.outer_color '#515151'
hc attr theme.outer_width 0
hc attr theme.inner_color '#515151'
hc attr theme.inner_width 0
hc attr theme.background_color '#515151'

hc attr theme.active.color '#ffcc66'
hc attr theme.active.outer_color '#ffcc66'
hc attr theme.active.inner_color '#ffcc66'
hc attr theme.normal.color '#515151'
hc attr theme.normal.outer_color '#515151'
hc attr theme.normal.inner_color '#515151'
hc attr theme.urgent.color '#f2777a'

herbstclient set tree_style '╾│ ├└╼─┐'

# unlock, just to be sure
hc unlock

# do multi monitor setup here, e.g.:
# hc detect_monitors

# find the panel
panel=~/.config/herbstluftwm/panel.sh
[ -x "$panel" ] || panel=/etc/xdg/herbstluftwm/panel.sh
for monitor in $(herbstclient list_monitors | cut -d: -f1); do
    # start it on each monitor
    "$panel" $monitor &
done

# hooks
hc --idle '(focus_empty|focus_nonempty)' | while read hook; do
    case $hook in
        focus_empty)
            focus_empty
            ;;
        focus_nonempty)
            focus_nonempty
            ;;
    esac
done

compton --config $HOME/.config/compton.conf -b
